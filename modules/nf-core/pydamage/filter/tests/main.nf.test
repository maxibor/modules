
nextflow_process {

    name "Test Process PYDAMAGE_FILTER"
    script "../main.nf"
    process "PYDAMAGE_FILTER"

    tag "modules"
    tag "modules_nfcore"
    tag "pydamage"
    tag "pydamage/filter"

    test("test-pydamage-filter") {

        setup {
            run ("PYDAMAGE_ANALYZE") {
                script "../../../pydamage/analyze/main.nf"
                process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = PYDAMAGE_ANALYZE.out.csv
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
